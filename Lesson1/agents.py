from crewai import Agent, LLM, Process
from tools import Yt_ChannelTool,Yt_searchTool
import os

from dotenv import load_dotenv
load_dotenv()

#set ebvironment variables
# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") 
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
os.environ['OPENAI_MODEL_NAME'] = os.getenv("OPENAI_MODEL_NAME")
import openai

# Create a new OpenAI client
# client = openai.Client(api_key="YOUR_API_KEY")

# Use the client to create a chat interface
# chat = client.create_chat()

# configure the agents for local llm
# llm =  chat.create_message(
#     model = "llama2",
#     base_url = "http://localhost:11434/v1",
# )

llm =LLM(model="ollama/mistral:latest")

# creeate a blog content researcher agent
researcher_agent = Agent(
    role="blog_researcher",
    goal = "research blog content",
    verbose = True, # set to True to see the agent's actions,
    memory = True, # set to True to enable memory
    memory_size = 1000, #unit is in words
    backstory = (
        "Expect in understanding video transcripts,in respect domain of {topic}"
    ),
    tools = [Yt_searchTool,Yt_ChannelTool],
    allow_delegation = True
    ,llm = llm
)


# create a blog content writer agent
blog_writer = Agent(
    role="blog_writer",
    goal = "write blog content",
    verbose = True, # set to True to see the agent's actions,
    memory = True, # set to True to enable memory
    memory_size = 1000, #unit is in words
    backstory = (
        "Expert in simplifying complext topics in specific domain of context"
        "engaing and informative content for professional social media platforms like linkedin, twitter and medium" 
        "SEO optimized content"
        "demonstrates thought leadership in the domain of {topic}"
    ),
    tools = [Yt_ChannelTool,Yt_searchTool],
    allow_delegation = True,
    llm = llm
)


# create a personalized notes content writer agent
notes_writer = Agent(
    role="blog_writer",
    goal = "write blog content",
    verbose = True, # set to True to see the agent's actions,
    memory = True, # set to True to enable memory
    memory_size = 1000, #unit is in words
    backstory = (
        "write comprehnsive notes combinning different notes taking styles"
        "concise and easy to understand"
        "Harmoniusly combine The Cornell Method,The Outline Method,The Mapping Method, The Charting Method, The Sentence Method, The Flow-Based Method, The T-notes Method."
    ),
    tools = [Yt_searchTool,Yt_ChannelTool],
    allow_delegation = True,
    llm = llm
)
    
    
    
#create a mindmap generator agent
mindmap_generator = Agent(
    role="mindmap_generator",
    goal = "generate mindmaps",
    verbose = True, # set to True to see the agent's actions,
    memory = True, # set to True to enable memory
    memory_size = 1000, #unit is in words
    backstory = (
        "expert in generating mindmaps"
        "concise and easy to understand"
        "recommend visual elements to enhance understanding with acommented #tags"
        ),
    tools = [Yt_searchTool,Yt_ChannelTool],
    allow_delegation = True,
    llm = llm
)


Quality_assurance = Agent(
    role="Quality_assurance",
    goal = "Quality_assurance",
    verbose = True, # set to True to see the agent's actions,
    memory = True, # set to True to enable memory    
    memory_size = 1000, #unit is in words
    backstory = (
        "checks the quality of the content generated by the agents"
        "checks for grammatical errors, spelling mistakes, and plagiarism"
        "checks for the accuracy of the content"
        "checks for the relevance of the content"
        "checks for the coherence of the content"
        "checks for the completeness of the content"
    ),
    llm = llm
)